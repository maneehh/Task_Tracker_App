@page "/"
@rendermode InteractiveServer
@using Microsoft.EntityFrameworkCore
@using Microsoft.EntityFrameworkCore.Internal
@using Models = Task_Tracker_App.Models
@using Task_Tracker_App.Data
@inject IDbContextFactory<TaskTrackerAppContext> DbFactory

<PageTitle>Task Tracker</PageTitle>

<div class="row">
    <form class="col-6">
        <div class="input-group">
            <label class="input-group-text">Task</label>
            <input @bind="_TaskContent" class="form-control" />
            <button type="button" @onclick="Save" class="btn btn-outline-primary">Save</button>
        </div>
        @if(!string.IsNullOrEmpty(ErrorMessage)){
            <div class="alert alert-danger mt-2">@ErrorMessage</div>
        }
    </form>
    
</div>

@if(ShowConfirmDeleteOption) {
<div class="row mt-3">
    <div class="col-6">
        <div class="alert alert-danger">
            Are you sure you want to delete this task?
            <div>@_Task.Content</div>
            <div>
                <button @onclick="() => CancelDelete()" class="btn btn-secondary">No</button>
                <button @onclick="() => Delete(_Task)" class="btn btn-danger">Yes</button>
            </div>
        </div>
    </div>
</div>
}

<div class="row my-3">
    <div class="col-6">
        <ul class="list-group">
            @foreach (var task in Tasks)
            {
                <li class="list-group-item">
                    <button @onclick="() =>  ConfirmDelete(task)" class="btn btn-danger btn-sm">Delete</button>
                    <button @onclick="() =>  Edit(task)" class="btn btn-primary btn-sm">Edit</button>
                    <button @onclick="() =>  Done(task)" class="btn btn-success btn-sm">Done</button>
                    <span style="text-decoration: @(task.IsDone ? "line-through": "none")">@task.Content</span>
                </li>
            }
        </ul>
    </div>
</div>


@code {
    private bool ShowConfirmDeleteOption = false;
    private string ErrorMessage;
    private string _TaskContent;
    private Models.Task? _Task;
    private List<Models.Task> Tasks = new List<Models.Task>();

    protected override void OnInitialized()
    {
        LoadTasks();
    }



    private void Save()
    {
        if (string.IsNullOrWhiteSpace(_TaskContent))
        {
            ErrorMessage = "Task must not be empty!"; //Error message when task content is empty
            return;
        }

        if(_Task is null)
        {
            var task = new Models.Task { Content = _TaskContent };
            using (var dbFactory = DbFactory.CreateDbContext())
            {
                dbFactory.Tasks.Add(task); //Addthe new task to the database
                dbFactory.SaveChanges(); //Save changes in the database
            }
            LoadTasks();
        }
        else
        {
            using (var dbFactory = DbFactory.CreateDbContext())
            {
                var task = dbFactory.Tasks.Find(_Task.Id);
                if(task is not null)
                {
                    task.Content = _TaskContent;
                    dbFactory.SaveChanges();
                }
            }
            var index = Tasks.IndexOf(_Task);
            _Task.Content = _TaskContent;
            Tasks[index] = _Task;

            _Task = null;
        }
        _TaskContent = string.Empty;
        ErrorMessage = string.Empty;

    }

    private void Done(Models.Task task)
    {
        task.IsDone = !task.IsDone;
        using (var dbFactory = DbFactory.CreateDbContext())
        {
            dbFactory.Update(task);
            dbFactory.SaveChanges();
        }
    }

    private void Edit(Models.Task task)
    {
        _Task = task; //Set the task that will be edited
        _TaskContent = task.Content;
        ErrorMessage = string.Empty;
    }

    private void ConfirmDelete(Models.Task task)
    {
        _Task = task; //Set the task to be deleted
        ShowConfirmDeleteOption = true;
    }

    private void Delete(Models.Task task)
    {
        using (var dbFactory = DbFactory.CreateDbContext())
        {
            dbFactory.Tasks.Remove(task);
            dbFactory.SaveChanges();
        }
        Tasks.Remove(task);
        ShowConfirmDeleteOption = false;
        _Task = null;
    }

    private void CancelDelete()
    {
        ShowConfirmDeleteOption = false;
        _Task = null;
    }

    private void LoadTasks()
    {
        using (var dbFactory = DbFactory.CreateDbContext())
        {
            Tasks = dbFactory.Tasks.ToList();
        }
    }
}

